---
import { configLoader } from "../utils/configLoader";
const CONFIG = await configLoader();

import { Image, getImage } from "astro:assets";

import BaseLayout from "./Base.astro";
import TagSingle from "../components/TagSingle.astro";
const { data } = Astro.props;

let byline_html_string: string;
if (
  CONFIG.BLOG_POST_SHOW_AUTHOR == false &&
  CONFIG.BLOG_POST_SHOW_DATE == false
) {
  byline_html_string = "";
} else {
  byline_html_string = '<p class="byline mb-2">Posted';
  if (CONFIG.BLOG_POST_SHOW_AUTHOR == true) {
    byline_html_string += " by " + data.author;
  }
  if (CONFIG.BLOG_POST_SHOW_DATE == true) {
    byline_html_string += " on " + data.dateCreated.toString().slice(0, 10);
  }
  byline_html_string += "</p>";
}

// If no description is provided, use the title as the description
let page_description: string;
if (data.description) {
  page_description = data.description;
} else {
  page_description = data.title;
}
const page_title = data.title + " | " + CONFIG.TITLE;
const page_url = CONFIG.URL + "/" + data.slug;

// changing from direct image src to Astro image object. Need to generate the image path for OG/Twit meta tags.
// const page_image_src = data.image ? data.image.src : null;
// hmmm.. this ^^^ gets the original image, not the optimised one. Need to figure out how to get the optimised image.

// aha! use the getImage function to get the optimised image:
const optimised_image = data.image
  ? await getImage({ src: data.image, inferSize: true })
  : null;
---

<BaseLayout
  page_title={page_title}
  page_description={page_description}
  page_url={page_url}
  meta_type="article"
  meta_image={optimised_image ? optimised_image.src : null}
>
  {
    data.image ? (
      data.imageAlt ? (
        <Image src={data.image} inferSize={true} alt={data.imageAlt} />
      ) : (
        <Image src={data.image} inferSize={true} alt={data.title} />
      )
    ) : null
  }
  <div id="meta_data" class="max-w-[65ch]">
    <h1 class="text-4xl font-bold max-w-[65ch]">{data.title}</h1>
    <Fragment set:html={byline_html_string} />
    {
      // Only render the tags div if tag option exists, and it's an array
      Array.isArray(data.tags) && data.tags.length > 0 ? (
        <div class="tags mb-8">
          {data.tags.map((tag: string) => (
            <TagSingle
              label={tag}
              url={`/tags/${tag.replace(/\s+/g, "-")}`}
              count={0}
              display_count={false}
            />
          ))}
        </div>
      ) : (
        // If no tags exist, add empty div to maintain spacing
        <div class="no-tags mb-8" />
      )
    }
  </div>
  <article class="prose mt-2 prose-headings:-my-2 prose-h2:mb-2">
    <slot />
  </article>
</BaseLayout>
