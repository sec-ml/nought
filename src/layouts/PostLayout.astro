---
import { configLoader } from "../utils/configLoader";
const CONFIG = await configLoader();

import { Image, getImage } from "astro:assets";

import BaseLayout from "./Base.astro";
import TagSingle from "../components/TagSingle.astro";
const { data } = Astro.props;

let byline_html_string: string;
if (
  CONFIG.BLOG_POST_SHOW_AUTHOR == false &&
  CONFIG.BLOG_POST_SHOW_DATE == false
) {
  byline_html_string = "";
} else {
  byline_html_string = '<p class="byline mb-2">Posted';
  if (CONFIG.BLOG_POST_SHOW_AUTHOR == true) {
    byline_html_string += " by " + data.author;
  }
  if (CONFIG.BLOG_POST_SHOW_DATE == true) {
    byline_html_string += " on " + data.dateCreated.toString().slice(0, 10);
  }
  byline_html_string += "</p>";
}

// If no description is provided, use the title as the description
let page_description: string;
if (data.description) {
  page_description = data.description;
} else {
  page_description = data.title;
}
const page_title = data.title + " | " + CONFIG.TITLE;
const page_url = CONFIG.URL + "/" + data.slug;

// changing from direct image src to Astro image object. Need to generate the image path for OG/Twit meta tags.
// const page_image_src = data.image ? data.image.src : null;
// hmmm.. this ^^^ gets the original image, not the optimised one. Need to figure out how to get the optimised image.

// aha! use the getImage function to get the optimised image:
const optimised_image = data.image
  ? await getImage({ src: data.image, inferSize: true })
  : null;
---

<BaseLayout
  page_title={page_title}
  page_description={page_description}
  page_url={page_url}
  meta_type="article"
  meta_image={optimised_image ? optimised_image.src : null}
>
  {
    // If image exists, render it. If no alt text is provided, use the title as the alt text.
    // If no image exists, don't render anything.
    // TODO: Config option to set a fallback image.
    data.image ? (
      <div id="header_image" class="pt-5 md:pt-0 h-[400px] overflow-hidden">
        {
          // Tried adding a config option to set the image height: class={`pt-5 md:pt-0 h-[${CONFIG.POST_IMAGE_HEIGHT}px] overflow-hidden`}
          // This does get set, and the class is correct in resulting HTML, but Tailwind doesn't generate the CSS for it. For future...
        }
        <Image
          src={data.image}
          class="w-full h-full object-cover object-center"
          inferSize={true}
          alt={data.imageAlt || data.title}
        />
      </div>
    ) : null
  }

  <div class="align-middle flex flex-col items-center justify-center">
    <article
      class="prose grid grid-cols-1 mt-0 prose-headings:-my-0 prose-h2:mb-2 prose-h2:mt-4 prose-p:mb-1 max-w-2xl p-6"
    >
      {
        // weird bug where code block was breaking responsiveness. From https://github.com/tailwindlabs/tailwindcss-typography/issues/96#issuecomment-1047554910 - adding grid grid-cols-1 fixed, although some of the prose heading margins got broken.
      }
      <div id="meta_data" class="">
        <h1 class="text-4xl font-bold">{data.title}</h1>
        <Fragment set:html={byline_html_string} />
        {
          // Only render the tags div if tag option exists, and it's an array
          Array.isArray(data.tags) && data.tags.length > 0 ? (
            <div class="tags mb-0">
              {data.tags.map((tag: string) => (
                <TagSingle
                  label={tag}
                  url={`/tags/${tag.replace(/\s+/g, "-")}`}
                  count={0}
                  display_count={false}
                />
              ))}
            </div>
          ) : (
            // If no tags exist, add empty div to maintain spacing
            <div class="no-tags mb-0" />
          )
        }
        <hr class="mt-6 mb-4" />
      </div>
      <slot />
    </article>
  </div>
</BaseLayout>
