---
import { configLoader } from "../utils/configLoader";
const CONFIG = await configLoader();

import { Image } from "astro:assets";

const {
  title,
  url,
  tags,
  post,
  image,
  image_alt,
  selected_tag,
  author,
  created,
  excerpt,
} = Astro.props;

import PostExcerpt from "@igor.dvlpr/astro-post-excerpt";

// Normalise tags to lowercase
const normalised_tags = Array.isArray(tags)
  ? tags.map((tag: string) => tag.toLowerCase())
  : [];

let byline_html_string: string;
if (CONFIG.POST_LISTING_SHOW_AUTHOR || CONFIG.POST_LISTING_SHOW_DATE) {
  byline_html_string = '<p class="byline mb-2">Posted';
  if (CONFIG.POST_LISTING_SHOW_AUTHOR == true) {
    byline_html_string += " by " + author;
  }
  if (CONFIG.POST_LISTING_SHOW_DATE == true) {
    byline_html_string += " on " + created.toString().slice(0, 10);
  }
  byline_html_string += "</p>";
} else {
  byline_html_string = "";
}
---

<article
  class="relative overflow-hidden bg-base-300 text-base-content border-base-content shadow-accent rounded-field shadow-[4px_4px_0px_0px] hover:shadow-[0px_0px_0px_0px] transition-shadow duration-300 ease-in-out border-2 mb-6"
>
  {
    // Make the whole article a clickable link to the post.
    // Pointer-events-auto for the anchor, -none for other
    // elements, and -auto for the individual tags
  }
  <a
    href={url}
    class="absolute inset-0 z-10 pointer-events-auto"
    aria-label={title}></a>
  {
    // TODO: Refactored posts to allow whole block to be anchor link. Remove image-specific anchor.
    image ? (
      image_alt ? (
        <a href={url}>
          <Image
            src={image}
            inferSize={true}
            alt={image_alt}
            class="relative z-20 pointer-events-none"
          />
        </a>
      ) : (
        <a href={url}>
          <Image
            src={image}
            inferSize={true}
            alt={title}
            class="relative z-20 pointer-events-none"
          />
        </a>
      )
    ) : null
  }

  <div class="p-4 relative z-20 pointer-events-none">
    <a class="" href={url}><h1 class="text-3xl mb-3">{title}</h1></a>
    <Fragment set:html={byline_html_string} />
    <p class="post-excerpt">
      {
        // Check for excerpt. If null or not set, fallback to PostExcerpt.
        excerpt || <PostExcerpt post={post} words={40} addEllipsis={true} />
      }
    </p>
    {
      // Only render the tags div if tag option exists, and is an array
      Array.isArray(normalised_tags) && normalised_tags.length > 0 ? (
        // include tag check logic outside of div, to collapse spacing if not required
        <div class="mt-4">
          {normalised_tags.map((tag: string) => {
            const separator: string =
              normalised_tags.indexOf(tag) < normalised_tags.length - 1
                ? ' <span class="text-base-content">|</span> '
                : "";
            const selected_tag_styling: string =
              selected_tag == tag
                ? "inline-block hover:underline pointer-events-auto font-bold italic text-base-content p-0 tag m-0"
                : "inline-block hover:underline pointer-events-auto italic text-base-content p-0 tag m-0";
            return (
              <>
                <span class={selected_tag_styling}>
                  <a class="" href={`/tags/${tag.replace(/\s+/g, "-")}`}>
                    #{tag}
                  </a>
                </span>
                <Fragment set:html={separator} />
              </>
            );
          })}
        </div>
      ) : null
    }
  </div>
</article>
